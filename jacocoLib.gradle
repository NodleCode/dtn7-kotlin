def coveredProject = subprojects

apply plugin: 'jacoco'

configure(coveredProject) { prj ->
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.7"
    }

    task jacocoReport(type: JacocoReport, dependsOn: 'test') {
        group = 'Reporting'
        description = 'Generate Jacoco coverage'

        reports {
            csv.enabled = true
            xml.enabled = false
            html.enabled = true
        }

        final fileFilter = [//bpv7
                '**/*RegistrationAlreadyExists*.*',
                '**/*BpCreate*.*',
                '**/*BpKey*.*',
                '**/*BpKeyCreate*.*',
                '**/*BpKeyShow*.*',
                '**/*BpShow*.*',
                '**/*BpStatus*.*',
                '**/*BpUtil*.*',
                '**/*Application*.*',
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                'android/**/*.*',
                '**/*Query.*',
                '**/*Query$*.*',
                // android
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                'androidx/**/*.*',
                // butterKnife
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                // dagger
                '**/*_MembersInjector.class',
                '**/Dagger*Component.class',
                '**/Dagger*Component$Builder.class',
                '**/*Module_*Factory.class',
                '**/di/module/*',
                '**/*_Factory*.*',
                '**/*Module*.*',
                '**/*Dagger*.*',
                '**/*Hilt*.*',
                // kotlin
                '**/*MapperImpl*.*',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                '**/*Component*.*',
                '**/*BR*.*',
                '**/Manifest*.*',
                '**/*$Lambda$*.*',
                '**/*Companion*.*',
                '**/*Module*.*',
                '**/*Dagger*.*',
                '**/*Hilt*.*',
                '**/*Factory*.',
                '**/*$Builder*',
                '**/*$Parcelable*.*',
                '**/*MembersInjector*.*',
                '**/*_MembersInjector.class',
                '**/*_Factory*.*',
                '**/*_Provide*Factory*.*',
                '**/*Extensions*.*',
                '**/*Test*.*',
                '**/*Mock*.*',
                // sealed and data classes
                '**/*$Result.*',
                '**/*$Result$*.*',
                '**/me/**/*.*',
                '**/api',
                '**/org/**/*.*'
        ]
        final kotlinTree = fileTree(dir: "${buildDir}/classes/kotlin", excludes: fileFilter)
        final javacTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
        final mainSrc = "${projectDir}/src/main/java"

        sourceDirectories.setFrom files([mainSrc])
        classDirectories.setFrom files([kotlinTree, javacTree])
        executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                'jacoco/test.exec', 'outputs/code-coverage/connected/*coverage.ec'
        ])
    }
}

/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 */
task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    tasks.withType(Test) {
        ignoreFailures true
    }

    def projects = coveredProject

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file("${rootProject.projectDir}/build/reportsLibs/jacoco/html")
        }
        csv {
            enabled true
            destination file("${rootProject.projectDir}/build/reportsLibs/jacoco/jacocoFullReport.csv")
        }
        xml {
            enabled true
            destination file("${rootProject.projectDir}/build/reportsLibs/jacoco/jacocoFullReport.xml")
        }
    }

    doFirst {
        // Kotlin update new version deprication
        //noinspection GroovyAssignabilityCheck
        //executionData.setFrom files(executionData.findAll { it.exists() })
    }
}